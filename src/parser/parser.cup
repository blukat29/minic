package parser;
import java_cup.runtime.*;

import ast.*;

parser code {:
    public Parser(Lexer lexer, ComplexSymbolFactory sf) {
      super(lexer, sf);
    }
:}

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, COMMA, EQUALS, COLON,
                    LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE,
                    RETURN, WHILE, DO, FOR, IF, ELSE, SWITCH, CASE, BREAK, DEFAULT;
terminal String     MINUS, TIMES, DIVIDE, PLUS, LT, GT, LE, GE, EQEQ, NE;
terminal TypeInfo   TYPE;
terminal IdExpr     ID;
terminal IntNum     INTNUM;
terminal FloatNum   FLOATNUM;

/* Non terminals */
non terminal Program    Program;
non terminal DeclList   DeclList;
non terminal FuncList   FuncList;
non terminal Declaration Declaration;
non terminal IdentList  IdentList;
non terminal Identifier identifier;
non terminal Function   Function;
non terminal ParamList  ParamList;
non terminal CompoundStmt CompoundStmt;
non terminal StmtList   StmtList;
non terminal Stmt       Stmt;
non terminal AssignStmt AssignStmt;
non terminal Assign     Assign;
non terminal CallStmt   CallStmt;
non terminal CallExpr   Call;
non terminal RetStmt    RetStmt;
non terminal WhileStmt  WhileStmt;
non terminal ForStmt    ForStmt;
non terminal IfStmt     IfStmt;
non terminal            SwitchStmt;
non terminal            CaseList;
non terminal Expr       Expr;
non terminal ArgList    ArgList;
non terminal            CaseBlockList;
non terminal            CaseBlock;
non terminal            DefaultBlock;

/* Precedence. From lower to higher. */
precedence nonassoc IF;
precedence nonassoc ELSE;

precedence right    EQUALS;
precedence left     EQEQ, NE;
precedence left     LT, GT, LE, GE;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence right    MINUS;
precedence left     LPAREN, RPAREN;

/* Top level grammar rules */
Program      ::= DeclList:dl FuncList:fl {: RESULT = new Program(dl, fl); :}
               | DeclList:dl             {: RESULT = new Program(dl); :}
               | FuncList:fl             {: RESULT = new Program(fl); :}
               |                         {: RESULT = new Program(); :}
               ;
DeclList     ::= Declaration:d        {: RESULT = (new DeclList()).append(d); :}
               | DeclList:l Declaration:d  {: RESULT = l.append(d); :}
               ;
FuncList     ::= Function:f               {: RESULT = (new FuncList()).append(f); :}
               | FuncList:fl Function:f   {: RESULT = fl.append(f); :}
               ;

/* Variable declarations */
Declaration  ::= TYPE:ty IdentList:il SEMI  {: RESULT = new Declaration(ty, il); :}
               ;
IdentList    ::= identifier:id                    {: RESULT = (new IdentList()).append(id); :}
               | IdentList:l COMMA identifier:id  {: RESULT = l.append(id); :}
               ;
identifier   ::= ID:id                            {: RESULT = new Identifier(id); :}
               | ID:id LBRACKET INTNUM:n RBRACKET {: RESULT = new Identifier(id, n); :}
               ;

/* Function definition */
Function     ::= TYPE:ty ID:id LPAREN RPAREN CompoundStmt:body
                    {: RESULT = new Function(ty, id, body); :}
               | TYPE:ty ID:id LPAREN ParamList:params RPAREN CompoundStmt:body
                    {: RESULT = new Function(ty, id, params, body); :}
               ;
ParamList    ::= TYPE:ty identifier:id                     {: RESULT = (new ParamList()).append(ty, id); :}
               | ParamList:pl COMMA TYPE:ty identifier:id  {: RESULT = pl.append(ty, id); :}
               ;

/* Statements */
CompoundStmt ::= LBRACE StmtList:sl RBRACE              {: RESULT = new CompoundStmt(sl); :}
               | LBRACE DeclList:dl StmtList:sl RBRACE  {: RESULT = new CompoundStmt(dl, sl); :}
               ;
StmtList     ::= StmtList:sl Stmt:s  {: RESULT = sl.append(s); :}
               |                     {: RESULT = new StmtList(); :}
               ;
Stmt         ::= SEMI                {: RESULT = new Stmt(); :}
               | AssignStmt:as       {: RESULT = as; :}
               | CallStmt:cs         {: RESULT = cs; :}
               | RetStmt:rs          {: RESULT = rs; :}
               | WhileStmt:ws        {: RESULT = ws; :}
               | ForStmt:fs          {: RESULT = fs; :}
               | IfStmt:is           {: RESULT = is; :}
               | SwitchStmt          {: RESULT = new Stmt(); :}
               | CompoundStmt:cs     {: RESULT = cs; :}
               ;

/* Assignments */
AssignStmt   ::= Assign:a SEMI       {: RESULT = new AssignStmt(a); :}
               ;
Assign       ::= ID:id EQUALS Expr:val
                    {: RESULT = new Assign(id, val); :}
               | ID:id LBRACKET Expr:idx RBRACKET EQUALS Expr:val
                    {: RESULT = new Assign(id, idx, val); :}
               ;

/* Call statements */
CallStmt     ::= Call:c SEMI             {: RESULT = new CallStmt(c); :}
               ;
Call         ::= ID:id LPAREN RPAREN            {: RESULT = new CallExpr(id); :}
               | ID:id LPAREN ArgList:al RPAREN {: RESULT = new CallExpr(id, al); :}
               ;
ArgList      ::= Expr:e                  {: RESULT = (new ArgList()).append(e); :}
               | ArgList:al COMMA Expr:e {: RESULT = al.append(e); :}
               ;

/* Control Structures */
RetStmt      ::= RETURN SEMI             {: RESULT = new RetStmt(); :}
               | RETURN Expr:e SEMI      {: RESULT = new RetStmt(e); :}
               ;
WhileStmt    ::= WHILE LPAREN Expr:e RPAREN Stmt:s
                   {: RESULT = new WhileStmt(e, s, false); :}
               | DO Stmt:s WHILE LPAREN Expr:e RPAREN SEMI
                   {: RESULT = new WhileStmt(e, s, true); :}
               ;
ForStmt      ::= FOR LPAREN Assign:init SEMI Expr:cond SEMI Assign:incr RPAREN Stmt:body
                   {: RESULT = new ForStmt(init, cond, incr, body); :}
               ;
SwitchStmt   ::= SWITCH LPAREN identifier RPAREN LBRACE CaseList RBRACE
               ;
CaseList     ::= CaseBlockList
               | CaseBlockList DefaultBlock
               ;
CaseBlockList ::= CaseBlockList CaseBlock
                |
                ;
CaseBlock    ::= CASE INTNUM COLON StmtList
               | CASE INTNUM COLON StmtList BREAK SEMI
               ;
DefaultBlock ::= DEFAULT COLON StmtList
               | DEFAULT COLON StmtList BREAK SEMI
               ;

/* Shift/Reduce conflict between two cases. */
/* Assigned precedence IF < IF-ELSE to resolve the ambiguity. */
IfStmt       ::= IF LPAREN Expr:c RPAREN Stmt:t
                   {: RESULT = new IfStmt(c, t); :}           %prec IF
               | IF LPAREN Expr:c RPAREN Stmt:t ELSE Stmt:e
                   {: RESULT = new IfStmt(c, t, e); :}
               ;

/* Expressions */
Expr         ::= MINUS:op Expr:r                {: RESULT = new UnOpExpr(op, r); :}
               | Expr:l MINUS:op Expr:r         {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l TIMES:op Expr:r         {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l DIVIDE:op Expr:r        {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l PLUS:op Expr:r          {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l LT:op Expr:r            {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l GT:op Expr:r            {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l LE:op Expr:r            {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l GE:op Expr:r            {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l EQEQ:op Expr:r          {: RESULT = new BinOpExpr(l, op, r); :}
               | Expr:l NE:op Expr:r            {: RESULT = new BinOpExpr(l, op, r); :}
               | Call:c                         {: RESULT = c; :}
               | INTNUM:i                       {: RESULT = i; :}
               | FLOATNUM:f                     {: RESULT = f; :}
               | ID:id                          {: RESULT = id; :}
               | ID:id LBRACKET Expr:idx RBRACKET {: RESULT = new ArrayIndexExpr(id, idx); :}
               | LPAREN Expr:e RPAREN           {: RESULT = e; :}
               ;
