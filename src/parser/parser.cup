/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package parser;
import java_cup.runtime.*;
import ast.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI;
terminal String     TYPE, ID;

/* Non terminals */
non terminal            Program;
non terminal            DeclList;
non terminal            Declaration;
non terminal            IdentList;
non terminal            identifier;

/* The grammar rules */
Program      ::= DeclList                   {: :}
               ;
DeclList     ::= Declaration                {: :}
               ;
Declaration  ::= TYPE IdentList SEMI        {: :}
               ;
IdentList    ::= identifier                 {: :}
               ;
identifier   ::= ID                         {: :}
               ;

