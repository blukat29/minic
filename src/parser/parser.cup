/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package parser;
import java_cup.runtime.*;
import ast.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

/* Non terminals */
non terminal            expr_list;
non terminal Exp        expr;      // used to store evaluated subexpressions

/* precedence */
precedence left PLUS;

/* The grammar rules */
expr_list ::= expr_list expr:e SEMI         {: System.out.println(e);:}
            | expr:e SEMI                   {: System.out.println(e);:}
            ;

expr      ::= NUMBER:n                      {: RESULT = new IntExp(n); :}
            | expr:e1 PLUS expr:e2          {: RESULT = new BinOpExp(e1, e2, BinOpExp.PLUS); :}
            ;

