/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
package parser;
import java_cup.runtime.*;
import ast.*;

parser code {:
    // Connect this parser to a scanner!
    Lexer s;
    Parser(Lexer s){ this.s=s; }
:}

/* define how to connect to the scanner! */
init with {: s.init(); :};
scan with {: return s.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, COMMA, LBRACKET, RBRACKET, LPAREN, RPAREN, LBRACE, RBRACE;
terminal String     TYPE, ID;
terminal Integer    INTNUM;

/* Non terminals */
non terminal            Program;
non terminal            DeclList;
non terminal            FuncList;
non terminal            Declaration;
non terminal            IdentList;
non terminal            identifier;
non terminal            Function;
non terminal            ParamList;
non terminal            CompoundStmt;

/* Top level grammar rules */
Program      ::= DeclList FuncList          {: :}
               | DeclList                   {: :}
               | FuncList                   {: :}
               |                            {: :}
               ;
DeclList     ::= Declaration                {: :}
               | DeclList Declaration       {: :}
               ;
FuncList     ::= Function                   {: :}
               | FuncList Function          {: :}
               ;

/* Variable declarations */
Declaration  ::= TYPE IdentList SEMI        {: :}
               ;
IdentList    ::= identifier                 {: :}
               | IdentList COMMA identifier {: :}
               ;
identifier   ::= ID                         {: :}
               | ID LBRACKET INTNUM RBRACKET {: :}
               ;

/* Function definition */
Function     ::= TYPE ID LPAREN RPAREN CompoundStmt {: :}
               | TYPE ID LPAREN ParamList RPAREN CompoundStmt {: :}
               ;
ParamList    ::= TYPE ID                    {: :}
               | ParamList COMMA TYPE ID    {: :}
               ;

/* Statements */
CompoundStmt ::= LBRACE RBRACE              {: :}
               ;

